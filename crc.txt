SCENARIO: Upload a zip file with entrance exam source code.
-----------------------------------------------------------

  SubmissionController#create
    R: Accepts uploaded files from HTTP request params
    R: Redirects to status page on success, displays errors on upload form otherwise

    C: ExamUploader
    C*: UploadStatus

  ExamUploader
    R: Uploads zip file to S3
    R: Generates random key on successful upload
    R: Sets submission status to 'submitted' on succesful upload
    R: Reports errors on upload failure

    C: UploadStatus
    C: Submission

    (I): TokenPhrase

  UploadStatus
    R: Receives submission keyphrase on successful upload
    R: Receives error messages on failed upload
    R: Executes success/failure callbacks


SCENARIO: Check the status of a submitted exam
----------------------------------------------

  SubmissionController#show

    R: Looks up submission by keyphrase
    R: Renders view w. status and notes if key matches
    R: Renders a "submission not found" error if key does not match

    C: Submission

  Submission
    
    R: Handles persistence and retrieval of submission status and notes

SCENARIO: Update the status of a submitted exam
----------------------------------------------
Implement me!

SCENARIO: Download a submitted zip file
----------------------------------------------

So simple it doesn't make sense to draw up its own cards.
Maybe roll this in with the 'view the status of a submission' and
tweak wording to be more general?

SCENARIO: Cancel a submission
----------------------------------------------
Implement me!

SCENARIO: View all submissions and their status
----------------------------------------------
Implement me! (Don't forget protection here)
